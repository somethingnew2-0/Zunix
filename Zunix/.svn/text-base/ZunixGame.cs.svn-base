using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

using Zunix.Backgrounds;
using Zunix.Explosions;
using Zunix.Vehicles;
using Zunix.Weapons;

namespace Zunix
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class ZunixGame : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

        private Background roadBackground;

        // So the inheirted input class can manipulate the tank
        private PlayerTanks tank;
        private Lasers lasers;
        private AAExplosions explosions;
        private AntiAircraft antiaircraft;
        private Input.Input tankInput;

        private Rectangle viewportRect;

        public ZunixGame()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TOFIX: Set up so it reads these things from XML
            roadBackground = new Background();
            tank = new PlayerTanks();
            lasers = new Lasers();
            explosions = new AAExplosions();
            antiaircraft = new AntiAircraft();
            tankInput = new Input.Input(tank, lasers, antiaircraft);
            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            // Load the roadBackground
            roadBackground.LoadContent(GraphicsDevice, spriteBatch, Content.Load<Texture2D>("Backgrounds/Tank-Game_Ground"));

            // Load the badTank
            tank.LoadContent(GraphicsDevice, spriteBatch, Content.Load<Texture2D>("Vehicles/Bottom/BadTankBottomSmall"), Content.Load<Texture2D>("Vehicles/Top/BadTankTopSmall"));

            // Load the content for the tank input
            tankInput.LoadContent(GraphicsDevice);

            // Load the lasers
            lasers.LoadContent(GraphicsDevice, spriteBatch, Content.Load<Texture2D>("Weapons/Lasers/LaserAnimation"), new Vector2(12f, 16f));

            // Load the explosions
            explosions.LoadContent(GraphicsDevice, spriteBatch, Content.Load<Texture2D>("Explosions/ExplosionAnimation"), new Vector2(60f, 80f));

            // Load the antiaircraft
            antiaircraft.LoadContent(GraphicsDevice, spriteBatch, Content.Load<Texture2D>("Weapons/AntiAircraft/AAAnimation"), new Vector2(12f, 16f));

            viewportRect = new Rectangle(0, 0,
                graphics.GraphicsDevice.Viewport.Width,
                graphics.GraphicsDevice.Viewport.Height + 10);
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            // Update the background
            roadBackground.Update(gameTime);

            // Update the input and check to see if to quit
            if (tankInput.Update(gameTime))
            {
                this.Exit();
            }
          
            // Update the tank
            tank.Update(gameTime);

            lasers.Update(gameTime, tank);

            explosions.Update(gameTime);

            antiaircraft.Update(gameTime, tank, explosions);

            base.Update(gameTime);
        }




        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            graphics.GraphicsDevice.Clear(Color.CornflowerBlue);

            spriteBatch.Begin(SpriteBlendMode.AlphaBlend);

            roadBackground.Draw(gameTime);

            tank.Draw(gameTime, spriteBatch);

            lasers.Draw(gameTime);

            explosions.Draw(gameTime);

            antiaircraft.Draw(gameTime);

            spriteBatch.End();

            base.Draw(gameTime);
        } 
    }
}
